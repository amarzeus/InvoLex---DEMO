

import { Content } from "@google/genai";

export enum AIPersona {
  FormalPartner = 'FORMAL_PARTNER',
  NeutralAssociate = 'NEUTRAL_ASSOCIATE',
  ConciseSeniorCounsel = 'CONCISE_SENIOR_COUNSEL',
  AccommodatingColleague = 'ACCOMMODATING_COLLEAGUE',
}

export enum InvoLexPanelView {
  Action = 'ACTION',
  Dashboard = 'DASHBOARD',
  Tasks = 'TASKS',
  History = 'HISTORY',
  Suggestions = 'SUGGESTIONS',
  Review = 'REVIEW',
  Assistant = 'ASSISTANT',
}

export enum ModalView {
    Analytics = 'ANALYTICS',
    Settings = 'SETTINGS',
    None = 'NONE',
}

export enum PracticeManagementTool {
  Clio = 'Clio',
}

export enum BillableEntryStatus {
  Pending = 'PENDING',
  Synced = 'SYNCED',
  Error = 'ERROR',
  Generating = 'GENERATING',
}

export enum NotificationType {
  Success = 'SUCCESS',
  Error = 'ERROR',
  Info = 'INFO',
}

export interface NotificationAction {
  label: string;
  onClick: () => void;
}

export interface User {
  id: string;
  email: string;
  verified: boolean;
  twoFactorEnabled: boolean;
  twoFactorSecret?: string;
  recoveryCodes?: string[];
  passkeys: Passkey[];
  activeSessions: LoginHistory[];
  loginHistory: LoginHistory[];
}

export interface Session {
  user: User;
  token: string;
  sessionId: string;
}

export interface Notification {
  id: number;
  message: string;
  type: NotificationType;
  action?: NotificationAction;
}

export interface Email {
  id:string;
  sender: string;
  subject: string;
  body: string;
  date: string;
  read: boolean;
}

export enum BillingRuleActionType {
  ROUND_UP_HOURS = 'ROUND_UP_HOURS',
  IGNORE_SENDER_DOMAIN = 'IGNORE_SENDER_DOMAIN',
  SET_FIXED_HOURS = 'SET_FIXED_HOURS',
  AUTO_APPROVE_SYNC = 'AUTO_APPROVE_SYNC',
}

export enum BillingRuleConditionType {
  SENDER_DOMAIN_IS = 'SENDER_DOMAIN_IS',
  SUBJECT_CONTAINS = 'SUBJECT_CONTAINS',
  BODY_CONTAINS = 'BODY_CONTAINS',
}

export interface BillingRuleCondition {
  type: BillingRuleConditionType;
  value: string;
}

export interface BillingRule {
  id: string;
  actionType: BillingRuleActionType;
  actionValue: any; // e.g., 0.25 for rounding, 'myfirm.com' for ignoring
  conditions: BillingRuleCondition[];
}

export interface SuggestedBillingRule {
  justification: string;
  rule: BillingRule;
  targetMatterName: string;
}


export interface Matter {
  name: string;
  rate: number;
  billingRules: BillingRule[];
}

export interface ActionItem {
  id: string;
  text: string;
  completed: boolean;
}

export interface SyncDetails {
  syncedAt: string;
  targetSoftware: PracticeManagementTool;
  externalId?: string;
  errorMessage?: string;
  externalUrl?: string;
}

export interface BillableEntry {
  id: string;
  userId: string;
  emailIds?: string[];
  description: string;
  hours: number;
  rate: number;
  matter: string;
  status: BillableEntryStatus;
  date: string;
  targetSoftware: PracticeManagementTool;
  autoGenerated?: boolean;
  actionItems?: ActionItem[];
  detailedBreakdown?: string[];
  syncDetails?: SyncDetails;
  isArchived?: boolean;
  source?: 'InvoLex' | 'External';
  confidenceScore?: number;
}

export interface SuggestedEntry {
  emailIds: string[];
  emails: Email[];
  preview: AIPreview;
}

export interface AnalyticsData {
  hoursByMatter: { name: string; hours: number }[];
  revenueByMonth: { name: string; revenue: number }[];
  entriesByStatus: { name: string; value: number }[];
}

export interface AnalyticsInsight {
  insights: string[];
}

export interface Correction {
  originalDescription: string;
  correctedDescription: string;
  emailBody: string;
}

export interface AIPreview {
  description: string;
  suggestedMatter: string;
  actionItems?: string[];
  suggestedHours?: number;
  detailedBreakdown?: string[];
  justification?: {
    matter: string;
    description: string;
    ruleAppliedMessage?: string;
  };
  confidenceScore?: number;
  confidenceJustification?: string;
}

export interface LoginHistory {
    sessionId: string;
    loggedInAt: string;
    ipAddress: string;
    device: string;
}

export interface Passkey {
    id: string;
    deviceName: string;
    createdAt: string;
}

export enum TriageStatus {
  ANALYZING = 'ANALYZING',
  BILLABLE = 'BILLABLE',
  NOT_BILLABLE = 'NOT_BILLABLE',
  AUTO_PROCESSED = 'AUTO_PROCESSED',
  DUPLICATE_SUSPECTED = 'DUPLICATE_SUSPECTED',
}

export interface EmailTriageResult {
    status: TriageStatus;
    reason?: string;
    preview?: AIPreview;
}

export interface AlternativeMatterSuggestion {
  matter: string;
  confidence: string;
  justification: string;
}

export interface AlternativeMattersResult {
  suggestions: AlternativeMatterSuggestion[];
}

export interface ChatMessage {
  id: string;
  content: Content;
}
